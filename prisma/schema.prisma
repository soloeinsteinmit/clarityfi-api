// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(uuid()) @unique
  email           String      @unique
  password        String
  name            String
  isVerified      Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  isDeleted       Boolean     @default(false)

  accounts        Account[]
  categories      Category[]
  transactionsInitiated   Transactions[]  @relation("InitiatorTransactions")
}


enum AccountType {
  BANK
  CREDIT_CARD
  CASH
  SAVINGS
  CRYPTO
}

model Account {
  id              String      @id @default(uuid()) @unique

  userId          String
  user            User        @relation(fields: [userId], references: [id])

  name            String      @unique
  type            AccountType
  currency        String?     // ISO code like USD, GHS
  current_balance Decimal?
  isActive        Boolean     @default(false)
  isDeleted       Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  transactions    Transactions[]
}


enum Direction {
  DEBIT
  CREDIT
}

enum Status {
  PENDING
  AUTHORIZED
  POSTED
  FAILED
  REVERSED
  CANCELLED
}

model Transactions {
  id              String      @id @default(uuid()) @unique

  accountId       String
  account         Account     @relation(fields: [accountId], references: [id])

  categoryId     String
  category        Category    @relation(fields: [categoryId],references: [id])

  amount          Decimal
  convertedAmount Decimal
  currency        String      // ISO code like USD, GHS etc...
  exchangeRate    Decimal
  direction       Direction
  status          Status
  description     String?

  createdAt       DateTime    @default(now())
  postedAt        DateTime?   // nullable - only set when posted
  updatedAt       DateTime    @default(now())
  isDeleted       Boolean     @default(false)

  initiatedById   String
  initiatedBy     User?      @relation("InitiatorTransactions", fields: [initiatedById], references: [id])

  referenceId     String?

  reversedTransactionId   String?         @unique
  reversedTransaction     Transactions?   @relation("ReversalLink", fields: [reversedTransactionId], references: [id])
  transaction             Transactions?   @relation("ReversalLink")
  
  metadata        Json    // ensure it includes exchange rate metadata
}

enum CategoryType {
  INCOME
  EXPENSE
  TRANSFER
}

model Category {
  id              String      @id @default(uuid()) @unique

  userId          String?
  user            User?       @relation(fields: [userId], references: [id])

  name            String
  type            CategoryType
  icon            String?
  isDefault       Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now())
  isDeleted       Boolean     @default(false)

  transaction     Transactions[]
}

model DeletedUser {
  userId         String       @id @default(uuid()) @unique
  email           String      @unique
  deletedAt       DateTime    @default(now())
  reason          String
  snapshot        Json
  processed       Boolean     @default(false)
}